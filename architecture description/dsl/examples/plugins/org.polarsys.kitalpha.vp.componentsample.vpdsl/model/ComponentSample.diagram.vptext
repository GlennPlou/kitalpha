/*******************************************************************************
 * Copyright (c) 2014 Thales Global Services S.A.S.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *  Thales Global Services S.A.S - initial API and implementation
 ******************************************************************************/
 
 
/**
 *	Viewpoint ComponentSample
 *	@author: Benoît Langlois
 *	@date: 26/08/14
 *
 */ 

import external "platform:/resource/org.polarsys.kitalpha.vp.componentsample.design/description/ComponentSample.odesign"

Diagrams ComponentSample.diagram {
	Diagram "ComponentSampleDiagram" {
		domain-context: ComponentSample.data.ComponentModel
		Mapping {
			Container ComponentPackageContainer {
				domain-context: ComponentSample.data.ComponentPackage
				provided-by association ComponentSample.data.ComponentModel.packages
				Representation {
					Label {
						content: "Package " + ComponentSample.data.ComponentElement.name
						police: black
					}
					Style {
						FlatStyle {
							border: blue background: light_yellow foreground: light_yellow
						}
					}
				}
				Contains {
				
					Container HardwareComponentContainer {
						domain-context: ComponentSample.data.HardwareComponent provided-by association ComponentSample.data.ComponentPackage.components
						Representation {
							Label { content: "HW" + ComponentSample.data.ComponentElement.name police: black }
							Style {
								FlatStyle {	border: red background: light_orange foreground: dark_orange }
							}
						}
						Contains {
							
							Container InnerHardwareComponentContainer {
								domain-context: ComponentSample.data.HardwareComponent provided-by association ComponentSample.data.HardwareComponent.abstractComponent
								Representation {
									Label { content: "HW" + ComponentSample.data.ComponentElement.name police: black }
									Style {
										FlatStyle {	border: black background: white foreground: white }
									}
								}
								Contains {
									reuse InnerHardwareComponentContainer, SoftwareComponentNode
								}
							}
							
							Node SoftwareComponentNode {
								domain-context: ComponentSample.data.SoftwareComponent provided-by association ComponentSample.data.HardwareComponent.abstractComponent
								Representation {
									Label { content: "SW" + ComponentSample.data.ComponentElement.name police: black }
									Style {
										BasicStyle {border-color: black background: light_blue form: Ring}
									}
								}
							}
							
						}
					}
				}
			}
			
			Edge UseComponentToComponentEdge {
				association-context: ComponentSample.data.AbstractComponent.use
				source: ComponentPackageContainer.HardwareComponentContainer, ComponentPackageContainer.HardwareComponentContainer.InnerHardwareComponentContainer, ComponentPackageContainer.HardwareComponentContainer.SoftwareComponentNode
				target: ComponentPackageContainer.HardwareComponentContainer, ComponentPackageContainer.HardwareComponentContainer.InnerHardwareComponentContainer, ComponentPackageContainer.HardwareComponentContainer.SoftwareComponentNode
				Representation {
					Style { end-decorator: InputArrow color: black }
				}
			}
			
		}
		
		Actions {
			// ComponentPackageContainer actions
			Create ComponentPackageContainerCreate { label: "Component Package" action-for: ComponentPackageContainer icon: "package-icon.png" }
			Delete ComponentPackageContainerDelete { label: "Delete" action-for:  ComponentPackageContainer}

			// ComponentHardwareComponentContainer actions
			Create HardwareComponentContainerCreate { label: "Hardware" action-for: ComponentPackageContainer.HardwareComponentContainer icon: "Hardware.png"}
			Delete HardwareComponentContainerDelete { label: "Delete" action-for:  ComponentPackageContainer.HardwareComponentContainer}
			Drop HardwareComponentContainerDrop { label: "Drop" action-for: ComponentPackageContainer.HardwareComponentContainer}

			// InnerHardwareComponentContainer actions
			Create InnerHardwareComponentContainerCreate { label: "Inner Hardware" action-for: ComponentPackageContainer.HardwareComponentContainer.InnerHardwareComponentContainer icon: "Hardware.png"}
			Delete InnerHardwareComponentContainerDelete { label: "Delete" action-for:  ComponentPackageContainer.HardwareComponentContainer.InnerHardwareComponentContainer}
			Drop InnerHardwareComponentContainerDrop { label: "Drop" action-for: ComponentPackageContainer.HardwareComponentContainer.InnerHardwareComponentContainer}

			// SoftwareComponentNode actions
			Create SoftwareComponentNodeCreate { label: "Software" action-for: ComponentPackageContainer.HardwareComponentContainer.SoftwareComponentNode icon: "Software.png"}
			Delete SoftwareComponentNodeDelete { label: "Delete" action-for:  ComponentPackageContainer.HardwareComponentContainer.SoftwareComponentNode}
			Drop SoftwareComponentNodeDrop { label: "Drop" action-for: ComponentPackageContainer.HardwareComponentContainer.SoftwareComponentNode}
			
			// UseComponentToComponentEdge actions
			Create UseComponentToComponentEdgeCreate { label: "Use Link" action-for: UseComponentToComponentEdge icon: "arrow-right-16-ns.png"}
			Delete UseComponentToComponentEdgeDelete { label: "Delete" action-for:  UseComponentToComponentEdge}
			ReconnectEdge UseComponentToComponentReconnectEdge { label: "Reconnect Use Link" action-for:  UseComponentToComponentEdge}

			// Open actions			
			OpenAction GoAction { label: "Go!" icon: "goAction.gif"  }
		}
	}
	
	
	DiagramExtension "ComponentSampleExtension" {
		extended-diagram: ComponentSampleDiagram
		Mapping {
		//[Container, Node or Edge] 

		}
		
		Actions {
		//[Actions]
		}
		
		customizations {
			customization componentSampleCustomization with {
				
				node ("[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] [SoftwareComponentNode] Basic Shape light_blue ring"){
					over-all-nodes : false
					label-position : node
					hide-label : false
					border-dimension :  "0"
				}
				
				container ("[Component Sample] [ComponentPackageContainer] Gradient light_yellow to light_yellow",
					"[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] Gradient light_orange to dark_orange",
					"[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] [InnerHardwareComponentContainer] Gradient white to white"
				){
					over-all-containers : false
					width : 18
					height : 18
					round-corner : true
					border-dimension : "1"
				}
				
				edge ("[Component Sample] [UseComponentToComponentEdge] Edge Style solid") {
					over-all-edges : false
					line-style : solid
					size : "1"
					end-centering : Both
				}
			}
			
			customization innerHardwareStyle when (Java switchInnerHardwareStyle) with {
				paint Background ("[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] [InnerHardwareComponentContainer] Gradient white to white") with light_orange
				paint foreground ("[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] [InnerHardwareComponentContainer] Gradient white to white") with dark_orange
				paint Border ("[Component Sample] [ComponentPackageContainer] [HardwareComponentContainer] [InnerHardwareComponentContainer] Gradient white to white") with white
			}
		}
	}
}