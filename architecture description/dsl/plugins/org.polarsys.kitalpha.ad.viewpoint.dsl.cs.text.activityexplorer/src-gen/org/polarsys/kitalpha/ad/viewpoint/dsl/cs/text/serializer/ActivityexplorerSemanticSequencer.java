/*
 * generated by Xtext
 */
package org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.Activity;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.Overview;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.Page;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.PageExtension;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.Section;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.SectionExtension;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.ViewpointActivityExplorer;
import org.polarsys.kitalpha.ad.viewpoint.dsl.as.activityexplorer.model.viewpointActivityExplorer.ViewpointActivityExplorerPackage;
import org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.services.ActivityexplorerGrammarAccess;

@SuppressWarnings("all")
public class ActivityexplorerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActivityexplorerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ViewpointActivityExplorerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ViewpointActivityExplorerPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.OVERVIEW:
				sequence_Overview(context, (Overview) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.PAGE:
				sequence_Page(context, (Page) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.PAGE_EXTENSION:
				sequence_PageExtension(context, (PageExtension) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.SECTION_EXTENSION:
				sequence_SectionExtension(context, (SectionExtension) semanticObject); 
				return; 
			case ViewpointActivityExplorerPackage.VIEWPOINT_ACTIVITY_EXPLORER:
				sequence_ViewpointActivityExplorer(context, (ViewpointActivityExplorer) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         activityExplorerItemID=FQN? 
	 *         label=STRING? 
	 *         index=EInt 
	 *         hasPredicate=EBoolean? 
	 *         imagePathOff=STRING?
	 *     )
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Overview returns Overview
	 *
	 * Constraint:
	 *     (description=STRING? imagePathOn=STRING? imagePathOff=STRING?)
	 */
	protected void sequence_Overview(ISerializationContext context, Overview semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractPage returns PageExtension
	 *     PageExtension returns PageExtension
	 *
	 * Constraint:
	 *     (extendedPageID=FQN ownedSections+=Section*)
	 */
	protected void sequence_PageExtension(ISerializationContext context, PageExtension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractPage returns Page
	 *     Page returns Page
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         fileExtensions=STRING? 
	 *         activityExplorerItemID=FQN? 
	 *         label=STRING? 
	 *         index=EInt 
	 *         ownedOverview=Overview? 
	 *         imagePathOn=STRING? 
	 *         imagePathOff=STRING? 
	 *         tabName=STRING? 
	 *         hasPredicate=EBoolean? 
	 *         showViewer=EBoolean? 
	 *         ownedSections+=Section*
	 *     )
	 */
	protected void sequence_Page(ISerializationContext context, Page semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SectionExtension returns SectionExtension
	 *
	 * Constraint:
	 *     (extendedSectionID=FQN ownedActivities+=Activity*)
	 */
	protected void sequence_SectionExtension(ISerializationContext context, SectionExtension semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING? 
	 *         activityExplorerItemID=FQN? 
	 *         label=STRING? 
	 *         index=EInt 
	 *         filtering=EBoolean? 
	 *         expanded=EBoolean? 
	 *         ownedActivities+=Activity*
	 *     )
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ViewpointActivityExplorer returns ViewpointActivityExplorer
	 *
	 * Constraint:
	 *     (name=FQN ownedPages+=Page* ownedPages+=PageExtension* ownedSectionExtensions+=SectionExtension*)
	 */
	protected void sequence_ViewpointActivityExplorer(ISerializationContext context, ViewpointActivityExplorer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
