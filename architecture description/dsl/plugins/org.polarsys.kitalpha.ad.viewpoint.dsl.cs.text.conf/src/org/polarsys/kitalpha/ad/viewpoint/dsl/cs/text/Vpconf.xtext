/*******************************************************************************
 * Copyright (c) 2014 Thales Global Services S.A.S.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *  Thales Global Services S.A.S - initial API and implementation
 ******************************************************************************/
 /**
 * 
 * @author Amine Lajmi
 *
 */
grammar org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Vpconf with org.polarsys.kitalpha.ad.viewpoint.dsl.cs.text.Common

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpconf/1.0.0" as vpconf
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdesc/1.0.0" as vpdesc
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/as/vpdiagram/conf/1.0.0" as vpdiagramConfig
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/DocGenConfiguration/1.0.0" as docGenConfig
import "http://www.polarsys.org/kitalpha/ad/viewpoint/dsl/DescAirdGenConf/1.0.0" as airdGenConfig

/********************************************************************
 * 							vpconf
 * 
 ********************************************************************/

Configuration returns vpdesc::Aspect:
	{vpconf::Configuration}
	'Configuration' name=FQN
	'{'
		(vpConfigurationElements+=ConfigurationElement)*
	'}';

ConfigurationElement returns vpconf::ConfigurationElement:
	TargetApplication | GenerationConfiguration | Generation
;

TargetApplication returns vpconf::ConfigurationElement:
	{vpconf::TargetApplication}
	//('id' id = EString)?
	'target' (type=EString)
	;

GenerationConfiguration returns vpconf::ConfigurationElement: 
	{vpconf::GenerationConfiguration}
	//('id' id = EString)?
	'project' ( projectName=FQN)
	('nsuri' nsuri=STRING)?
	;

Generation returns vpconf::ConfigurationElement:
	{vpconf::Generation}
	'generation' '{'
		(ownedDataGenerationConf=GData)?
		(ownedExtensionGenConf+=ExtensionGeneratrionConfiguration)*
	'}'
;

GData returns vpconf::GData:
	{vpconf::GData}
	'data' '('
		(
			('Model'':' ((model=EBoolean)))?
			('Edit' ':' ((edit=EBoolean)))?
			('Editor'':'  ((editor=EBoolean)))?
			('Test'':' ((test=EBoolean)))?
			('Javadoc'':' ((javaDoc=EBoolean)))?
			('OverwriteEcore'':' (overwriteEcore=EBoolean))?
		)
	')'
;


ExtensionGeneratrionConfiguration returns vpconf::ExtensionGeneratrionConfiguration:
	DiagramGenerationConfiguration | DocumentationGenerationConfiguration | ModelsAirdGenerationConfiguration
;


DiagramGenerationConfiguration returns vpconf::ExtensionGeneratrionConfiguration:
	{vpdiagramConfig::DiagramGenerationConfiguration}
	'diagram' '('
		(
			('OverwriteOdesign'':' overwriteVSM=EBoolean)?
		)
	')'
;

DocumentationGenerationConfiguration returns vpconf::ExtensionGeneratrionConfiguration:
	{docGenConfig::DocumentationGenerationConfiguration}
	'documentation' '('
		('EcoreToHtml:' ecoreToHtml=EBoolean)?
	')'
;

ModelsAirdGenerationConfiguration returns vpconf::ExtensionGeneratrionConfiguration:
	{airdGenConfig::AirdGenerationConfiguration}
	'ecore' '('
		('aird' ':' genRepresentations=EBoolean)?
	')'
;